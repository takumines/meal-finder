openapi: 3.0.3
info:
  title: 何食べる？ API - Prisma + Supabase統合
  description: 食事決定アプリのAPI仕様（Prisma DB + Supabase Auth + カスタムAPI）
  version: 1.0.0
  contact:
    name: 何食べる？ Team
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://nantaberu.vercel.app/api
    description: Production server

# アーキテクチャ構成：
# 1. Supabase Auth: 認証関連（JWT認証）
# 2. Prisma: データベース操作（PostgreSQL）
# 3. Next.js API Routes: カスタムビジネスロジック + AI連携

paths:
  # AI質問生成
  /ai/generate-question:
    post:
      summary: AI質問生成
      description: OpenAI APIを使用して動的質問を生成
      security:
        - supabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  format: uuid
                userProfile:
                  $ref: '#/components/schemas/UserProfile'
                previousAnswers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Answer'
                  default: []
                timeOfDay:
                  $ref: '#/components/schemas/TimeSlot'
                location:
                  $ref: '#/components/schemas/Location'
              required:
                - sessionId
                - userProfile
                - timeOfDay
      responses:
        '200':
          description: 質問生成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: User ID mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '503':
          description: AI service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # 料理推薦生成
  /ai/generate-recommendation:
    post:
      summary: 料理推薦生成
      description: セッションの回答を分析して料理を推薦
      security:
        - supabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  format: uuid
              required:
                - sessionId
      responses:
        '200':
          description: 推薦生成成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MealRecommendationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Session or User Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '503':
          description: AI service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  # 質問セッション管理
  /sessions:
    post:
      summary: 新しい質問セッション開始
      description: 新しい質問セッションを作成
      security:
        - supabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time_of_day:
                  $ref: '#/components/schemas/TimeSlot'
                location:
                  $ref: '#/components/schemas/Location'
              required:
                - time_of_day
      responses:
        '200':
          description: セッション作成成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/QuestionSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Duplicate session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    get:
      summary: ユーザーのセッション一覧を取得
      description: 認証されたユーザーのセッション一覧を取得
      security:
        - supabaseAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: is_active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: セッション一覧取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          sessions:
                            type: array
                            items:
                              $ref: '#/components/schemas/QuestionSessionWithAnswers'
                          total:
                            type: integer
                          hasMore:
                            type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}:
    get:
      summary: セッション情報取得
      description: 指定されたセッションの詳細情報を取得
      security:
        - supabaseAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: セッション情報
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/QuestionSessionWithAnswers'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # 質問・回答
  /sessions/{sessionId}/questions/next:
    get:
      summary: 次の質問を取得
      description: セッション内の次の質問を取得（または推薦を返す）
      security:
        - supabaseAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 次の質問または推薦
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/Question'
                          - $ref: '#/components/schemas/MealRecommendationResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}/answers:
    post:
      summary: 質問への回答を送信
      description: セッション内の質問に対する回答を記録
      security:
        - supabaseAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questionId:
                  type: string
                  format: uuid
                response:
                  type: boolean
                responseTime:
                  type: number
                  description: 回答時間（ミリ秒）
              required:
                - questionId
                - response
                - responseTime
      responses:
        '200':
          description: 回答記録成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Answer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ユーザープロファイル管理
  /users/{userId}/profile:
    get:
      summary: ユーザープロファイル取得
      description: 指定されたユーザーのプロファイル情報を取得
      security:
        - supabaseAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: プロファイル情報
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      summary: ユーザープロファイル更新
      description: ユーザーのプロファイル情報を更新
      security:
        - supabaseAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiSuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    supabaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase Auth JWT Token

  schemas:
    # 共通レスポンス形式
    ApiSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: レスポンスデータ（エンドポイントごとに異なる）
      required:
        - success

    ApiError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    # ユーザープロファイル
    UserProfile:
      type: object
      description: Prisma UserProfile モデル
      properties:
        id:
          type: string
          format: uuid
          description: auth.users.id FK
        preferred_genres:
          type: array
          items:
            $ref: '#/components/schemas/CuisineGenre'
          default: []
        allergies:
          type: array
          items:
            type: string
          default: []
        spice_preference:
          $ref: '#/components/schemas/SpiceLevel'
        budget_range:
          $ref: '#/components/schemas/BudgetRange'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - spice_preference
        - budget_range
        - created_at
        - updated_at

    UserProfileUpdate:
      type: object
      properties:
        preferred_genres:
          type: array
          items:
            $ref: '#/components/schemas/CuisineGenre'
        allergies:
          type: array
          items:
            type: string
        spice_preference:
          $ref: '#/components/schemas/SpiceLevel'
        budget_range:
          $ref: '#/components/schemas/BudgetRange'

    # セッション関連
    QuestionSessionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        time_of_day:
          $ref: '#/components/schemas/TimeSlot'
        location:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/SessionStatus'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - time_of_day
        - status
        - created_at
        - updated_at

    QuestionSessionWithAnswers:
      allOf:
        - $ref: '#/components/schemas/QuestionSessionResponse'
        - type: object
          properties:
            answers:
              type: array
              items:
                $ref: '#/components/schemas/Answer'

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        category:
          $ref: '#/components/schemas/QuestionCategory'
        priority:
          type: integer
          minimum: 1
          maximum: 10
        isSystemQuestion:
          type: boolean
        questionIndex:
          type: integer
          description: セッション内での質問順序
      required:
        - id
        - text
        - category
        - questionIndex

    Answer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        response:
          type: boolean
        response_time:
          type: number
          description: ミリ秒
        question_index:
          type: integer
        answered_at:
          type: string
          format: date-time
      required:
        - id
        - session_id
        - question_id
        - response
        - response_time
        - question_index
        - answered_at

    # 推薦関連
    MealRecommendationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sessionId:
          type: string
          format: uuid
        mealName:
          type: string
        description:
          type: string
        cuisineGenre:
          $ref: '#/components/schemas/CuisineGenre'
        confidence:
          type: number
          minimum: 0
          maximum: 1
        reasoningSteps:
          type: array
          items:
            type: string
        generatedRecommendation:
          type: object
          description: AI生成された追加メタデータ
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - sessionId
        - mealName
        - description
        - cuisineGenre
        - confidence
        - createdAt

    MealHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        recommendation_id:
          type: string
          format: uuid
        reaction:
          type: string
          enum: ['liked', 'disliked', 'saved']
        notes:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - session_id
        - recommendation_id
        - reaction
        - created_at
        - updated_at

    # Enum Types（実装に基づく）
    CuisineGenre:
      type: string
      enum:
        - JAPANESE
        - CHINESE
        - KOREAN
        - ITALIAN
        - FRENCH
        - AMERICAN
        - INDIAN
        - THAI
        - MEXICAN
        - OTHER

    SpiceLevel:
      type: string
      enum:
        - NONE
        - MILD
        - MEDIUM
        - HOT
        - VERY_HOT

    BudgetRange:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - PREMIUM

    TimeSlot:
      type: string
      enum:
        - BREAKFAST
        - LUNCH
        - DINNER
        - SNACK

    SessionStatus:
      type: string
      enum:
        - in_progress
        - completed
        - abandoned

    QuestionCategory:
      type: string
      enum:
        - MOOD
        - GENRE
        - COOKING
        - SITUATION
        - TIME
        - PREFERENCE

    MealSource:
      type: string
      enum:
        - RECOMMENDATION
        - MANUAL_ENTRY

    Location:
      type: object
      properties:
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        prefecture:
          type: string
        city:
          type: string
      required:
        - latitude
        - longitude

  responses:
    BadRequest:
      description: リクエストが不正です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            validation_error:
              summary: バリデーションエラー
              value:
                error: "Missing required parameter: time_of_day"
                message: "Invalid time_of_day. Must be one of: BREAKFAST, LUNCH, DINNER, SNACK"
            insufficient_answers:
              summary: 回答不足エラー
              value:
                error: "Insufficient answers for recommendation generation"
                message: "At least 3 answers are required"

    Unauthorized:
      description: 認証が必要です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            error: "Unauthorized"
            message: "Authentication required"

    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            session_not_found:
              summary: セッションが見つからない
              value:
                error: "Session not found"
                message: "The specified session does not exist"
            profile_not_found:
              summary: プロファイルが見つからない
              value:
                error: "User profile not found"
                message: "User profile must be created before creating sessions"

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            error: "Internal server error"
            message: "An unexpected error occurred"